--- ./dcraw.1.463.c	2014-05-06 00:06:54.000000000 +0200
+++ dcraw.1.463.y.c	2014-05-08 15:24:25.943882784 +0200
@@ -1,4 +1,8 @@
 /*
+ * OpenMP multithread version of dcraw
+ * based on UFRaw dcraw_indi.c by Udi Fuchs
+ */
+/*
    dcraw.c -- Dave Coffin's raw photo decoder
    Copyright 1997-2014 by Dave Coffin, dcoffin a cybercom o net
 
@@ -105,6 +109,15 @@
 #define ushort unsigned short
 #endif
 
+#ifdef _OPENMP
+#include <omp.h>
+#define uf_omp_get_thread_num() omp_get_thread_num()
+#define uf_omp_get_num_threads() omp_get_num_threads()
+#else
+#define uf_omp_get_thread_num() 0
+#define uf_omp_get_num_threads() 1
+#endif
+
 /*
    All global variables are defined here, and all functions that
    access them are prefixed with "CLASS".  Note that a thread-safe
@@ -140,7 +153,10 @@
 int no_auto_bright=0;
 unsigned greybox[4] = { 0, 0, UINT_MAX, UINT_MAX };
 float cam_mul[4], pre_mul[4], cmatrix[3][4], rgb_cam[3][4];
-const double xyz_rgb[3][3] = {			/* XYZ from RGB */
+#ifndef LIGHTZONE
+const
+#endif
+double xyz_rgb[3][3] = {			/* XYZ from RGB */
   { 0.412453, 0.357580, 0.180423 },
   { 0.212671, 0.715160, 0.072169 },
   { 0.019334, 0.119193, 0.950227 } };
@@ -3940,6 +3956,19 @@
   merror (fimg, "wavelet_denoise()");
   temp = fimg + size*3;
   if ((nc = colors) == 3 && filters) nc++;
+#ifdef _OPENMP
+#if defined(__sun) && !defined(__GNUC__)	/* Fix UFRaw bug #3205673 - NKBJ */
+    #pragma omp parallel for				\
+    default(none)					\
+    shared(nc,image,scale,size,noise)				\
+    private(c,i,hpass,lev,lpass,row,col,thold,fimg,temp)
+#else
+    #pragma omp parallel for				\
+    default(none)					\
+    shared(nc,image,iheight,iwidth,scale,threshold,size)				\
+    private(c,i,hpass,lev,lpass,row,col,thold,fimg,temp)
+#endif
+#endif
   FORC(nc) {			/* denoise R,G1,B,G3 individually */
     for (i=0; i < size; i++)
       fimg[i] = 256 * sqrt(image[i][c] << scale);
@@ -4214,6 +4243,9 @@
 	  *ip++ = 256 / sum[c];
 	}
     }
+#ifdef _OPENMP
+    #pragma omp parallel for default(shared) private(row,col,pix,ip,sum,i)
+#endif
   for (row=1; row < height-1; row++)
     for (col=1; col < width-1; col++) {
       pix = image[row*width+col];
@@ -4308,7 +4340,18 @@
   merror (brow[4], "vng_interpolate()");
   for (row=0; row < 3; row++)
     brow[row] = brow[4] + row*width;
-  for (row=2; row < height-2; row++) {		/* Do VNG interpolation */
+#ifdef _OPENMP
+    #pragma omp parallel				\
+    default(none)					\
+    shared(image,code,prow,pcol,width,height,colors)			\
+    private(row,col,g,brow,pix,ip,gval,diff,gmin,gmax,thold,sum,color,num,c,t)
+#endif
+{
+  int slice = (height - 4) / uf_omp_get_num_threads();
+  int start_row = 2 + slice * uf_omp_get_thread_num();
+  int end_row = MIN(start_row + slice, height - 2);
+
+  for (row=start_row; row < end_row; row++) {		/* Do VNG interpolation */
     for (col=2; col < width-2; col++) {
       pix = image[row*width+col];
       ip = code[row % prow][col % pcol];
@@ -4360,6 +4403,7 @@
   memcpy (image[(row-2)*width+2], brow[0]+2, (width-4)*sizeof *image);
   memcpy (image[(row-1)*width+2], brow[1]+2, (width-4)*sizeof *image);
   free (brow[4]);
+} /* pragma omp parallel */
   free (code[0][0]);
 }
 
@@ -4375,7 +4419,17 @@
   border_interpolate(3);
   if (verbose) fprintf (stderr,_("PPG interpolation...\n"));
 
+#ifdef _OPENMP
+    #pragma omp parallel				\
+    default(none)					\
+    shared(image,dir,diff,width,height,filters)				\
+    private(row,col,i,d,c,pix,guess)
+#endif
+{
 /*  Fill in the green layer with gradients and pattern recognition: */
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=3; row < height-3; row++)
     for (col=3+(FC(row,3) & 1), c=FC(row,col); col < width-3; col+=2) {
       pix = image + row*width+col;
@@ -4392,6 +4446,9 @@
       pix[0][1] = ULIM(guess[i] >> 2, pix[d][1], pix[-d][1]);
     }
 /*  Calculate red and blue for each green pixel:		*/
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=1; row < height-1; row++)
     for (col=1+(FC(row,2) & 1), c=FC(row,col+1); col < width-1; col+=2) {
       pix = image + row*width+col;
@@ -4400,6 +4457,9 @@
 			- pix[-d][1] - pix[d][1]) >> 1);
     }
 /*  Calculate blue for red pixels and vice versa:		*/
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=1; row < height-1; row++)
     for (col=1+(FC(row,1) & 1), c=2-FC(row,col); col < width-1; col+=2) {
       pix = image + row*width+col;
@@ -4415,6 +4475,7 @@
       else
 	pix[0][c] = CLIP((guess[0]+guess[1]) >> 2);
     }
+} /* pragma omp parallel */
 }
 
 void CLASS cielab (ushort rgb[3], short lab[3])
@@ -4435,11 +4496,49 @@
     return;
   }
   xyz[0] = xyz[1] = xyz[2] = 0.5;
-  FORCC {
-    xyz[0] += xyz_cam[0][c] * rgb[c];
-    xyz[1] += xyz_cam[1][c] * rgb[c];
-    xyz[2] += xyz_cam[2][c] * rgb[c];
+
+  if (colors == 3)
+    FORC(3) {
+      xyz[c] += xyz_cam[c][0] * rgb [0] + xyz_cam[c][1] * rgb [1] + xyz_cam[c][2] * rgb [2] ;
+    }
+  else
+    FORCC {
+      xyz[0] += xyz_cam[0][c] * rgb[c];
+      xyz[1] += xyz_cam[1][c] * rgb[c];
+      xyz[2] += xyz_cam[2][c] * rgb[c];
+    }
+
+  xyz[0] = cbrt[CLIP((int) xyz[0])];
+  xyz[1] = cbrt[CLIP((int) xyz[1])];
+  xyz[2] = cbrt[CLIP((int) xyz[2])];
+  lab[0] = 64 * (116 * xyz[1] - 16);
+  lab[1] = 64 * 500 * (xyz[0] - xyz[1]);
+  lab[2] = 64 * 200 * (xyz[1] - xyz[2]);
+}
+
+void CLASS cielab3 (ushort rgb[3], short lab[3])
+{
+  int c, i, j, k;
+  float r, xyz[3];
+  static float cbrt[0x10000], xyz_cam[3][4];
+
+  if (!rgb) {
+    for (i=0; i < 0x10000; i++) {
+      r = i / 65535.0;
+      cbrt[i] = r > 0.008856 ? pow(r,1/3.0) : 7.787*r + 16/116.0;
+    }
+    for (i=0; i < 3; i++)
+      for (j=0; j < colors; j++)
+	for (xyz_cam[i][j] = k=0; k < 3; k++)
+	  xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];
+    return;
   }
+  xyz[0] = xyz[1] = xyz[2] = 0.5;
+
+    FORC(3) {
+      xyz[c] += xyz_cam[c][0] * rgb [0] + xyz_cam[c][1] * rgb [1] + xyz_cam[c][2] * rgb [2] ;
+    }
+
   xyz[0] = cbrt[CLIP((int) xyz[0])];
   xyz[1] = cbrt[CLIP((int) xyz[1])];
   xyz[2] = cbrt[CLIP((int) xyz[2])];
@@ -4451,13 +4550,38 @@
 #define TS 512		/* Tile Size */
 #define fcol(row,col) xtrans[(row+top_margin+6)%6][(col+left_margin+6)%6]
 
+#if ! defined(_OPENMP)
+// Makes a 10% difference in performances in sequential version, but none at all with OPENMP...
+// And _STATIC_BUFFER is delicate to manage
+#define _STATIC_BUFFER
+#define _FIXED_NDIR
+#endif
+
+/* Allow each tile to be calculate independently from the others
+   Explanation: the border pixels from each tiles start from the border pixel of other tiles
+   This goes from top to bottom:
+   - the first pixels of each tile depend on the last ones of the previous tile
+   - the last ones depend on the first ones of the next tile
+   In sequential mode, the first pixels use the calculated values from the previous tiles and fresh values from the next tile.
+   In OpenMP / parallel mode, the first pixels of the next files might have been already calculated.
+   The STRIC_IMAGE makes it possible to use indeed fresh values, always
+*/
+#define _STRICT_IMAGE
+
 /*
    Frank Markesteijn's algorithm for Fuji X-Trans sensors
  */
 void CLASS xtrans_interpolate (int passes)
 {
   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;
-  int val, ndir, pass, hm[8], avg[4], color[3][8];
+  // int val, ndir, pass, hm[8], avg[4], color[3][8];
+  int val, pass, hm[8], avg[4], color[3][8];
+#if defined(_FIXED_NDIR)
+  const int ndir = 4 << 1;
+#else
+  int ndir = 4 << (passes > 1);
+#endif
+  
   static const short orth[12] = { 1,0,0,1,-1,0,0,-1,1,0,0,1 },
 	patt[2][16] = { { 0,1,0,-1,2,0,-1,0,1,1,1,-1,0,0,0,0 },
 			{ 0,1,0,-2,1,0,-2,0,1,1,-2,-2,1,-1,-1,1 } },
@@ -4467,20 +4591,29 @@
   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];
    short (*lab)    [TS][3], (*lix)[3];
    float (*drv)[TS][TS], diff[6], tr;
-   char (*homo)[TS][TS], *buffer;
+#if defined(_STATIC_BUFFER)
+  char (*homo)[TS][TS];
+  static char buffer [TS*TS*(8*11+6)] __attribute__((aligned(64)));
+#else 
+  char (*homo)[TS][TS], *buffer;
+#endif
+
 
   if (verbose)
-    fprintf (stderr,_("%d-pass X-Trans interpolation...\n"), passes);
+#if defined(_OPENMP)
+    fprintf (stderr,_("%d-pass X-Trans interpolation with %d max threads...\n"), 
+	     passes, omp_get_max_threads ());
+#else
+    fprintf (stderr,_("%d-pass X-Trans interpolation...\n"), 
+	     passes);
+#endif
 
-  cielab (0,0);
+  cielab3 (0,0);
   border_interpolate(6);
-  ndir = 4 << (passes > 1);
-  buffer = (char *) malloc (TS*TS*(ndir*11+6));
-  merror (buffer, "xtrans_interpolate()");
-  rgb  = (ushort(*)[TS][TS][3]) buffer;
-  lab  = (short (*)    [TS][3])(buffer + TS*TS*(ndir*6));
-  drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));
-  homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));
+
+  if ((4 << (passes > 1)) != ndir)
+    fprintf (stderr,_("4 << (passes > 1) = %d != ndir = %d\n"),
+	     (4 << (passes > 1)), ndir);
 
 /* Map a green hexagon around each non-green pixel and vice versa:	*/
   for (row=0; row < 3; row++)
@@ -4497,6 +4630,7 @@
 	}
       }
 
+
 /* Set green1 and green3 to the minimum and maximum allowed values:	*/
   for (row=2; row < height-2; row++)
     for (min=~(max=0), col=2; col < width-2; col++) {
@@ -4516,20 +4650,67 @@
       }
     }
 
+  ushort (*working_image)[4];
+#if defined(_STRICT_IMAGE)
+  working_image = (ushort (*)[4]) calloc (iheight, iwidth*sizeof *image);
+  memcpy (working_image, image, iheight * iwidth * sizeof *image);
+  merror (working_image, "xtrans_interpolate working_image");
+#endif
+
+#ifdef _FIXED_NDIR
+#pragma omp parallel default (none)			\
+  shared (height, width, image, allhex, sgrow, sgcol, stderr, xtrans, \
+	  top_margin, left_margin, passes, verbose, working_image)			\
+  private (top, left, mrow, mcol, row, col, color, pix, hex, c, pass, rix, \
+	   val, h, f, d, g, tr, v, hm, max, avg, lix, diff, i, \
+	   buffer, rgb, lab, drv, homo)
+#else
+#pragma omp parallel default (none)			\
+  shared (height, width, image, allhex, ndir, sgrow, sgcol, stderr, xtrans, top_margin, left_margin, passes, verbose, working_image) \
+  private (top, left, mrow, mcol, row, col, color, pix, hex, c, pass, rix, \
+	   val, h, f, d, g, tr, v, hm, max, avg, lix, diff, i, \
+	   buffer, rgb, lab, drv, homo)
+#endif
+  {
+#if 0 && defined(_OPENMP)
+    if (verbose)
+      fprintf (stderr,_("> xtrans_interpolate thread #%d/%d/%d\n"), 
+	       omp_get_thread_num (), omp_get_num_threads (), omp_get_max_threads ());
+#endif
+
+#if ! defined(_STATIC_BUFFER)
+  buffer = (char *) malloc (TS*TS*(ndir*11+6));
+  merror (buffer, "xtrans_interpolate()");
+#endif
+
+  rgb  = (ushort(*)[TS][TS][3]) buffer;
+  lab  = (short (*)    [TS][3])(buffer + TS*TS*(ndir*6));
+  drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));
+  homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));
+
+#pragma omp for
   for (top=3; top < height-19; top += TS-16)
     for (left=3; left < width-19; left += TS-16) {
       mrow = MIN (top+TS, height-3);
       mcol = MIN (left+TS, width-3);
       for (row=top; row < mrow; row++)
 	for (col=left; col < mcol; col++)
-	  memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);
+#if defined(_STRICT_IMAGE)
+	  memcpy (rgb[0][row-top][col-left], working_image[row*width+col], 6);
+#else
+          memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);
+#endif
       FORC3 memcpy (rgb[c+1], rgb[0], sizeof *rgb);
 
 /* Interpolate green horizontally, vertically, and along both diagonals: */
       for (row=top; row < mrow; row++)
 	for (col=left; col < mcol; col++) {
 	  if ((f = fcol(row,col)) == 1) continue;
+#if defined(_STRICT_IMAGE)
+	  pix = working_image + row*width + col;
+#else
 	  pix = image + row*width + col;
+#endif
 	  hex = allhex[row % 3][col % 3][0];
 	  color[1][0] = 174 * (pix[  hex[1]][1] + pix[  hex[0]][1]) -
 			 46 * (pix[2*hex[1]][1] + pix[2*hex[0]][1]);
@@ -4551,7 +4732,11 @@
 	  for (row=top+2; row < mrow-2; row++)
 	    for (col=left+2; col < mcol-2; col++) {
 	      if ((f = fcol(row,col)) == 1) continue;
+#if defined(_STRICT_IMAGE)
+	      pix = working_image + row*width + col;
+#else
 	      pix = image + row*width + col;
+#endif
 	      hex = allhex[row % 3][col % 3][1];
 	      for (d=3; d < 6; d++) {
 		rix = &rgb[(d-2)^!((row-sgrow) % 3)][row-top][col-left];
@@ -4622,8 +4807,9 @@
       for (d=0; d < ndir; d++) {
 	for (row=2; row < mrow-2; row++)
 	  for (col=2; col < mcol-2; col++)
-	    cielab (rgb[d][row][col], lab[row][col]);
-	for (f=dir[d & 3],row=3; row < mrow-3; row++)
+	    cielab3 (rgb[d][row][col], lab[row][col]); // use cielab3 because X-trans is 3 colors
+	f=dir[d & 3];
+	for (row=3; row < mrow-3; row++)
 	  for (col=3; col < mcol-3; col++) {
 	    lix = &lab[row][col];
 	    g = 2*lix[0][0] - lix[f][0] - lix[-f][0];
@@ -4638,14 +4824,12 @@
       for (row=4; row < mrow-4; row++)
 	for (col=4; col < mcol-4; col++) {
 	  for (tr=FLT_MAX, d=0; d < ndir; d++)
-	    if (tr > drv[d][row][col])
-		tr = drv[d][row][col];
+	    tr = MIN(tr, (drv[d][row][col]));
 	  tr *= 8;
 	  for (d=0; d < ndir; d++)
 	    for (v=-1; v <= 1; v++)
 	      for (h=-1; h <= 1; h++)
-		if (drv[d][row+v][col+h] <= tr)
-		  homo[d][row][col]++;
+		homo[d][row][col] += (drv[d][row+v][col+h] <= tr);
 	}
 
 /* Average the most homogenous pixels for the final result:	*/
@@ -4655,8 +4839,17 @@
 	for (col = MIN(left,8); col < mcol-8; col++) {
 	  for (d=0; d < ndir; d++)
 	    for (hm[d]=0, v=-2; v <= 2; v++)
-	      for (h=-2; h <= 2; h++)
+	      /*
+		for (h=-2; h <= 2; h++)
 		hm[d] += homo[d][row+v][col+h];
+	      */
+	      /* */
+	      hm[d] += homo[d][row+v][col-2] +
+		homo[d][row+v][col-1] +
+		homo[d][row+v][col+0] +
+		homo[d][row+v][col+1] +
+		homo[d][row+v][col+2];
+	  /* */
 	  for (d=0; d < ndir-4; d++)
 	    if (hm[d] < hm[d+4]) hm[d  ] = 0; else
 	    if (hm[d] > hm[d+4]) hm[d+4] = 0;
@@ -4672,7 +4865,10 @@
 	  FORC3 image[(row+top)*width+col+left][c] = avg[c]/avg[3];
 	}
     }
+  }
+#if ! defined(_STATIC_BUFFER)
   free(buffer);
+#endif
 }
 #undef fcol
 
@@ -4691,6 +4887,12 @@
 
   if (verbose) fprintf (stderr,_("AHD interpolation...\n"));
 
+#ifdef _OPENMP
+    #pragma omp parallel				\
+    default(shared)					\
+    private(top, left, row, col, pix, rix, lix, c, val, d, tc, tr, i, j, ldiff, abdiff, leps, abeps, hm, buffer, rgb, lab, homo)
+#endif
+{
   cielab (0,0);
   border_interpolate(5);
   buffer = (char *) malloc (26*TS*TS);
@@ -4699,6 +4901,9 @@
   lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);
   homo = (char  (*)[TS][TS])   (buffer + 24*TS*TS);
 
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (top=2; top < height-5; top += TS-6)
     for (left=2; left < width-5; left += TS-6) {
 
@@ -4781,6 +4986,7 @@
       }
     }
   free (buffer);
+} /* pragma omp parallel */
 }
 #undef TS
 
@@ -9075,6 +9281,9 @@
   img = (ushort (*)[4]) calloc (high, wide*sizeof *img);
   merror (img, "fuji_rotate()");
 
+#ifdef _OPENMP
+    #pragma omp parallel for default(shared) private(row,col,ur,uc,r,c,fr,fc,pix,i)
+#endif
   for (row=0; row < high; row++)
     for (col=0; col < wide; col++) {
       ur = r = fuji_width + (row-col)*step;
@@ -9339,6 +9548,9 @@
 #ifndef NO_LCMS
   const char *cam_profile=0, *out_profile=0;
 #endif
+#ifdef LIGHTZONE
+  char *ofbase = 0;
+#endif
 
 #ifndef LOCALTIME
   putenv ((char *) "TZ=UTC");
@@ -9433,6 +9645,9 @@
       case 'p':  cam_profile = argv[arg++];
 #endif
 	break;
+#ifdef LIGHTZONE
+      case 'F':  ofbase     = argv[arg++];  break;
+#endif
       case 'P':  bpfile     = argv[arg++];  break;
       case 'K':  dark_frame = argv[arg++];  break;
       case 'z':  timestamp_only    = 1;  break;
@@ -9461,6 +9676,19 @@
 	return 1;
     }
   }
+#ifdef LIGHTZONE
+  if (!half_size && !thumbnail_only) {
+    float rimm[3][3] = {
+      { 0.7977, 0.2880, 0.0000 },
+      { 0.1352, 0.7119, 0.0000 },
+      { 0.0313, 0.0001, 0.8249 } };
+    int i, j;
+
+    for (i=0; i < 3; ++i)
+      for (j=0; j < 3; ++j)
+        xyz_rgb[i][j] = rimm[j][i];
+  }
+#endif
   if (arg == argc) {
     fprintf (stderr,_("No files to process.\n"));
     return 1;
@@ -9599,6 +9827,10 @@
 	  for (i=0; i < 16; i++)
 	    putchar (cdesc[fcol(i >> 1,i & 1)]);
 	}
+#ifdef LIGHTZONE	
+	printf(_("\nCamera RGB Profile:"));
+	for (i=0; i<3; ++i) FORCC printf(" %f", rgb_cam[i][c]);
+#endif
 	printf (_("\nDaylight multipliers:"));
 	FORCC printf (" %f", pre_mul[c]);
 	if (cam_mul[0] > 0) {
@@ -9711,6 +9943,11 @@
     if (write_to_stdout)
       strcpy (ofname,_("standard output"));
     else {
+#ifdef LIGHTZONE
+      if (ofbase)
+        strcpy (ofname, ofbase);
+      else
+#endif
       strcpy (ofname, ifname);
       if ((cp = strrchr (ofname, '.'))) *cp = 0;
       if (multi_out)
